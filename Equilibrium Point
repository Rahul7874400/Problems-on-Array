#include <iostream>
using namespace std;


class Solution{
    public:
    // Function to find equilibrium point in the array.
    // a: input array
    // n: size of array
    int equilibriumPoint(long long a[], int n) {
        
        // naive approach
        /*
        for(int i = 0;i<n;i++)
        {
             long long int l_sum = 0;
             for(int j=0;j<i;j++)
             l_sum+=a[j];
             
             long long int r_sum = 0;
             
             for(int j=i+1;j<n;j++)
             r_sum+=a[j];
             
             if(l_sum==r_sum)
             return i+1;
        }
        
        return -1;
        */
        // efficent approach
        long long int sum = 0;
        for(int i=0;i<n;i++)
        sum+=a[i];
        long long int l_sum = 0;
        for(int i=0;i<n;i++)
        {
            if(l_sum==sum-a[i])
            return i+1;
            
            l_sum+=a[i];
            sum-=a[i];
        }
        
        return -1;
    }

};


int main() {

    long long t;
    
    //taking testcases
    cin >> t;

    while (t--) {
        long long n;
        
        //taking input n
        cin >> n;
        long long a[n];

        //adding elements to the array
        for (long long i = 0; i < n; i++) {
            cin >> a[i];
        }
        
        Solution ob;

        //calling equilibriumPoint() function
        cout << ob.equilibriumPoint(a, n) << endl;
    }
    return 0;
}
