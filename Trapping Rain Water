#include<bits/stdc++.h>

using namespace std;


class Solution{

    // Function to find the trapped water between the blocks.
    public:
    long long trappingWater(int arr[], int n){
        // naive approach
        /*
        int res =0;
        for(int i=1;i<n-1;i++)
        {
            int l_max = arr[i];
            for(int j=0;j<i;j++)
            l_max = max(l_max,arr[j]);
            
            int r_max = arr[i];
            
            for(int j=i+1;j<n;j++)
            r_max = max(r_max,arr[j]);
            
            res+=min(l_max,r_max)-arr[i];
        }
        
        return res;
        */
        
        // Efficent approach
         long long res = 0;
        int l_max[n];
        l_max[0] = arr[0];
        
        for(int i=1;i<n;i++)
        l_max[i] = max(l_max[i-1],arr[i]);
        
        int r_max[n];
        r_max[n-1] = arr[n-1];
        
        for(int i=n-2;i>=0;i--)
        r_max[i] = max(r_max[i+1],arr[i]);
        
        
        for(int i=1;i<n;i++)
        res+=min(l_max[i],r_max[i]) - arr[i];
        
        return res;
    }
};


int main(){
    
    int t;
    //testcases
    cin >> t;
    
    while(t--){
        int n;
        
        //size of array
        cin >> n;
        
        int a[n];
        
        //adding elements to the array
        for(int i =0;i<n;i++){
            cin >> a[i];            
        }
        Solution obj;
        //calling trappingWater() function
        cout << obj.trappingWater(a, n) << endl;
        
    }
    
    return 0;
} 
